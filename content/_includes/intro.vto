<form id="introRequestForm" class="w-full mx-auto p-6 space-y-6 bg-white rounded-lg shadow-md border border-zinc-200">
  <div class="space-y-2">
    <label class="block font-medium text-base text-on-canvas">Resume</label>
    <div
      id="dropZone"
      class="relative border-2 border-dashed border-zinc-300 rounded-lg p-8 text-center hover:border-accent transition-colors cursor-pointer"
      ondrop="handleDrop(event)"
      ondragover="handleDragOver(event)"
      ondragleave="handleDragLeave(event)"
    >
      <input
        type="file"
        id="resume"
        accept=".pdf"
        required
        class="absolute inset-0 w-full h-full opacity-0 cursor-pointer text-base"
        onchange="handleFileSelect(event)"
      >
      <div class="space-y-2">
        <svg class="mx-auto h-12 w-12 text-zinc-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
        <div class="text-zinc-600">
          <span id="fileText">Drag and drop your resume here, or click to select</span>
        </div>
        <p class="text-base text-zinc-500">PDF files only</p>
      </div>
    </div>
  </div>

  <div class="space-y-2">
    <label class="block text-base font-medium">Job Posting URL</label>
    <input
      type="url"
      id="jobUrl"
      required
      placeholder="https://"
      class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 text-base placeholder-zinc-600"
    >
  </div>

  <div class="space-y-2">
    <label class="block text-base font-medium">Why are you a great fit?</label>
    <textarea
      id="additionalContext"
      rows="3"
      placeholder="Don't worry about the tone or wordsmithing it &mdash; we'll handle it."
      class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 text-base placeholder-zinc-600"
    ></textarea>
  </div>

  <button
    type="submit"
    class="w-full bg-accent text-canvas py-2 px-4 rounded hover:bg-accent-dark transition flex items-center justify-center gap-2"
  >
    Generate Email
  </button>

  <div id="loadingState" class="hidden text-center py-8 space-y-4">
    <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-accent mx-auto"></div>
    <p class="text-zinc-600">Generating your email draft...</p>
  </div>

  <div id="emailPreview" class="hidden space-y-4">
    <div class="space-y-2">
      <label class="block text-base font-medium">Email Draft</label>
      <textarea
        id="emailBody"
        rows="20"
        readonly
        class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 text-base"
      ></textarea>
    </div>

    <div class="flex gap-4">
      <button
        id="copyButton"
        type="button"
        class="w-full bg-accent text-canvas py-2 px-4 rounded hover:bg-accent-dark transition flex items-center justify-center gap-2"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
        </svg>
        Copy to Clipboard
      </button>
    </div>
  </div>
</form>

<div class="mt-4 mb-8 text-center space-x-4 text-base text-zinc-500">
  <span>Privacy first — no data is stored.</span>
  <span>•</span>
  <a href="https://github.com/hirefrank/www/blob/main/lib/intro.ts"
     class="hover:text-accent hover:underline"
     target="_blank"
     rel="noopener noreferrer">View Source</a>
  <span>•</span>
  <a href="/mailto"
     class="hover:text-accent hover:underline"
     target="_blank"
     rel="noopener noreferrer">Send Feedback</a>
</div>

<script>
  async function handleSubmit(event) {
    event.preventDefault();
    console.log("Form submission started");

    const loadingState = document.getElementById('loadingState');
    const emailPreview = document.getElementById('emailPreview');

    try {
      // Show loading state
      loadingState.classList.remove('hidden');
      emailPreview.classList.add('hidden');

      const form = event.target;
      const resumeFile = form.querySelector('#resume').files[0];
      console.log("Resume file:", resumeFile.name, resumeFile.size);

      const resumeBuffer = await resumeFile.arrayBuffer();
      console.log("Resume buffer size:", resumeBuffer.byteLength);

      const formData = {
        jobUrl: form.querySelector('#jobUrl').value,
        additionalContext: form.querySelector('#additionalContext').value,
        resume: Array.from(new Uint8Array(resumeBuffer))
      };

      console.log("Sending request...");
      const response = await fetch('/api/generate-intro', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Server error: ${errorText}`);
      }

      const emailData = await response.json();
      console.log("Received response:", emailData);

      // Hide loading state and show preview
      loadingState.classList.add('hidden');
      emailPreview.classList.remove('hidden');
      document.getElementById('emailBody').value = `Subject: ${emailData.subject}\n\n${emailData.body}`;

      const copyButton = document.getElementById('copyButton');
      copyButton.onclick = copyToClipboard;

    } catch (error) {
      // Hide loading state on error
      loadingState.classList.add('hidden');
      console.error('Detailed error:', error);
      alert(`Failed to generate email: ${error.message}`);
    }
  }

  function copyToClipboard() {
    const emailBody = document.getElementById('emailBody');
    const copyButton = document.getElementById('copyButton');

    if (!emailBody || !emailBody.value) return;

    navigator.clipboard.writeText(emailBody.value)
      .then(() => {
        // Visual feedback
        const originalText = copyButton.innerHTML;
        copyButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M5 13l4 4L19 7" />
          </svg>
          Copied!
        `;
        setTimeout(() => {
          copyButton.innerHTML = originalText;
        }, 2000);
      })
      .catch((err) => {
        console.error('Failed to copy text: ', err);
        alert('Failed to copy text to clipboard');
      });
  }

  // Add form submit listener
  document.getElementById('introRequestForm').addEventListener('submit', handleSubmit);
</script>
